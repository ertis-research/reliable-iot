version: '3.7'

services:
  mongo_db: 
    image: mongo        
    ports:
      - "27018:27017"
#----------------------------------------
  mongoapi:
    image: ertis/iotdatabase
    deploy:
        replicas: 3
        restart_policy:
            condition: on-failure
    ports:
      - "8000:80"
#----------------------------------------
  iotregister:
    image: ertis/iotregister
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.role == manager
    ports:
      - "8001:80"
    volumes: 
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        
#----------------------------------------
  iotweb:
    image: ertis/iotweb
    deploy:
      replicas: 3
      restart_policy:
          condition: on-failure
    ports:
      - "8002:80"

#----------------------------------------
  iotshadowapplications:
    image: ertis/iotshadowapp
    deploy:
      replicas: 3
      restart_policy:
          condition: on-failure
    ports:
      - "8003:80"

#---------------------------------------
  iotrecovery:
    image: ertis/iotrecovery
    deploy:
      replicas: 2
      restart_policy:
          condition: on-failure
    ports:
      - "8004:80"


#--------------------LESHAN-SERVER-CLIENT------------------
  leshan:
    image: ertis/leshanondockers
    deploy:
      replicas: 1
      restart_policy:
          condition: on-failure
    ports:
      - target: 8080
        published: 8080
        protocol: tcp

      - target: 5683
        published: 5683
        protocol: udp
        
#--------------2-x-KAFKA -- 2-x-ZOOKEEPER-----------
  zookeeper1:
    image: zookeeper:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 100
        window: 30s
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zookeeper2:2888:3888;2181

  zookeeper2:
    image: zookeeper:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 100
        window: 30s
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181

   
  kafka1:
    image: wurstmeister/kafka:2.12-2.2.1
    deploy:
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 100
        window: 30s
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    environment:
      HOSTNAME_COMMAND: "hostname"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181, zookeeper2:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 36000
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_RETENTION_DAYS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka2:
    image: wurstmeister/kafka:2.12-2.2.1
    deploy:
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 100
        window: 30s
    ports:
      - target: 9095
        published: 9095
        protocol: tcp
        mode: host
    environment:
      HOSTNAME_COMMAND: "hostname"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181, zookeeper2:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9095
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 36000
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_RETENTION_DAYS: 2
      KAFKA_CREATE_TOPICS: "FailureTopic:2:2" # FailureTopic will have 3 partitions and 2 replicas
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

# The name of the network 'reliableiot' is used by the Register to deploy new connectors
networks:
  default:
    name: reliableiot